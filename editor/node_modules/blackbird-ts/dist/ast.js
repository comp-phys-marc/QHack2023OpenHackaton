"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.Equals = exports.Expression = exports.Str = exports.Sqrt = exports.Pi = exports.Exp = exports.Log = exports.ArcTanh = exports.ArcCosh = exports.ArcSinh = exports.ArcTan = exports.ArcCos = exports.ArcSin = exports.Tanh = exports.Cosh = exports.Sinh = exports.Tan = exports.Cos = exports.Sin = exports.Power = exports.Divide = exports.Times = exports.Plus = exports.Minus = exports.Variable = exports.Parameter = exports.Include = exports.Bool = exports.Comp = exports.Int = exports.Float = exports.Arr = exports.Device = exports.Target = exports.Version = exports.Name = exports.Operator = exports.ApplyOperator = exports.Register = exports.Id = exports.Measure = exports.AstNode = void 0;
/** Base class representing a basic AST node. */
var AstNode = /** @class */ (function () {
    function AstNode() {
    }
    return AstNode;
}());
exports.AstNode = AstNode;
/** Class representing a qumode register. */
var Register = /** @class */ (function (_super) {
    __extends(Register, _super);
    function Register(id, index) {
        var _this = _super.call(this) || this;
        _this.id = id;
        _this.index = index;
        return _this;
    }
    return Register;
}(AstNode));
exports.Register = Register;
/** Class representing an identifier. */
var Id = /** @class */ (function (_super) {
    __extends(Id, _super);
    function Id(id) {
        var _this = _super.call(this) || this;
        _this.id = id;
        return _this;
    }
    return Id;
}(AstNode));
exports.Id = Id;
/** Class representing a name. */
var Name = /** @class */ (function (_super) {
    __extends(Name, _super);
    function Name(val) {
        var _this = _super.call(this) || this;
        _this.val = val;
        return _this;
    }
    return Name;
}(AstNode));
exports.Name = Name;
/** Class representing a version. */
var Version = /** @class */ (function (_super) {
    __extends(Version, _super);
    function Version(val) {
        var _this = _super.call(this) || this;
        _this.val = val;
        return _this;
    }
    return Version;
}(AstNode));
exports.Version = Version;
/** Class representing a target. */
var Target = /** @class */ (function (_super) {
    __extends(Target, _super);
    function Target(val, params) {
        var _this = _super.call(this) || this;
        _this.val = val;
        _this.params = params;
        return _this;
    }
    return Target;
}(AstNode));
exports.Target = Target;
/** Class representing a device. */
var Device = /** @class */ (function (_super) {
    __extends(Device, _super);
    function Device(val) {
        var _this = _super.call(this) || this;
        _this.val = val;
        return _this;
    }
    return Device;
}(AstNode));
exports.Device = Device;
/** Class representing an include. */
var Include = /** @class */ (function (_super) {
    __extends(Include, _super);
    function Include(val) {
        var _this = _super.call(this) || this;
        _this.val = val;
        return _this;
    }
    return Include;
}(AstNode));
exports.Include = Include;
/** Class representing a measurement. */
var Measure = /** @class */ (function (_super) {
    __extends(Measure, _super);
    function Measure(name, registers, params) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.registers = registers;
        _this.params = params;
        return _this;
    }
    return Measure;
}(AstNode));
exports.Measure = Measure;
/** Class representing an operator application. */
var ApplyOperator = /** @class */ (function (_super) {
    __extends(ApplyOperator, _super);
    function ApplyOperator(name, registers, params) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.registers = registers;
        _this.params = params;
        return _this;
    }
    return ApplyOperator;
}(AstNode));
exports.ApplyOperator = ApplyOperator;
/** Class representing an operator. */
var Operator = /** @class */ (function (_super) {
    __extends(Operator, _super);
    function Operator(name, registers, params, nodes) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.registers = registers;
        _this.params = params;
        _this.nodes = nodes;
        return _this;
    }
    return Operator;
}(AstNode));
exports.Operator = Operator;
/** Base class representing a basic parameter. */
var Parameter = /** @class */ (function (_super) {
    __extends(Parameter, _super);
    function Parameter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Parameter;
}(AstNode));
exports.Parameter = Parameter;
/** Class representing an array. */
var Arr = /** @class */ (function (_super) {
    __extends(Arr, _super);
    function Arr(name, vals, size, type) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.vals = vals;
        _this.size = size;
        _this.type = type;
        return _this;
    }
    return Arr;
}(Parameter));
exports.Arr = Arr;
/** Class representing a float. */
var Float = /** @class */ (function (_super) {
    __extends(Float, _super);
    function Float(val, name) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.val = val;
        return _this;
    }
    return Float;
}(Parameter));
exports.Float = Float;
/** Class representing a string. */
var Str = /** @class */ (function (_super) {
    __extends(Str, _super);
    function Str(val, name) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.val = val;
        return _this;
    }
    return Str;
}(Parameter));
exports.Str = Str;
/** Class representing an integer. */
var Int = /** @class */ (function (_super) {
    __extends(Int, _super);
    function Int(val, name) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.val = val;
        return _this;
    }
    return Int;
}(Parameter));
exports.Int = Int;
/** Class representing a complex number. */
var Comp = /** @class */ (function (_super) {
    __extends(Comp, _super);
    function Comp(val, name) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.val = val;
        return _this;
    }
    return Comp;
}(Parameter));
exports.Comp = Comp;
/** Class representing a boolean. */
var Bool = /** @class */ (function (_super) {
    __extends(Bool, _super);
    function Bool(val, name) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.val = val;
        return _this;
    }
    return Bool;
}(Parameter));
exports.Bool = Bool;
/** Class representing a variable. */
var Variable = /** @class */ (function (_super) {
    __extends(Variable, _super);
    function Variable(val) {
        var _this = _super.call(this) || this;
        _this.val = val;
        return _this;
    }
    return Variable;
}(Parameter));
exports.Variable = Variable;
/** Base class representing a parameter that takes a parameter itself. */
var NestedParameter = /** @class */ (function (_super) {
    __extends(NestedParameter, _super);
    function NestedParameter(param) {
        var _this = _super.call(this) || this;
        _this.param = param;
        return _this;
    }
    return NestedParameter;
}(Parameter));
/** Class representing tangent. */
var Tan = /** @class */ (function (_super) {
    __extends(Tan, _super);
    function Tan() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Tan;
}(NestedParameter));
exports.Tan = Tan;
/** Class representing cosine. */
var Cos = /** @class */ (function (_super) {
    __extends(Cos, _super);
    function Cos() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Cos;
}(NestedParameter));
exports.Cos = Cos;
/** Class representing sine. */
var Sin = /** @class */ (function (_super) {
    __extends(Sin, _super);
    function Sin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Sin;
}(NestedParameter));
exports.Sin = Sin;
/** Class representing hyperbolic tangent. */
var Tanh = /** @class */ (function (_super) {
    __extends(Tanh, _super);
    function Tanh() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Tanh;
}(NestedParameter));
exports.Tanh = Tanh;
/** Class representing hyperbolic cosine. */
var Cosh = /** @class */ (function (_super) {
    __extends(Cosh, _super);
    function Cosh() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Cosh;
}(NestedParameter));
exports.Cosh = Cosh;
/** Class representing hyperbolic sine. */
var Sinh = /** @class */ (function (_super) {
    __extends(Sinh, _super);
    function Sinh() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Sinh;
}(NestedParameter));
exports.Sinh = Sinh;
/** Class representing inverse tangent. */
var ArcTan = /** @class */ (function (_super) {
    __extends(ArcTan, _super);
    function ArcTan() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ArcTan;
}(NestedParameter));
exports.ArcTan = ArcTan;
/** Class representing inverse cosine. */
var ArcCos = /** @class */ (function (_super) {
    __extends(ArcCos, _super);
    function ArcCos() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ArcCos;
}(NestedParameter));
exports.ArcCos = ArcCos;
/** Class representing inverse sine. */
var ArcSin = /** @class */ (function (_super) {
    __extends(ArcSin, _super);
    function ArcSin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ArcSin;
}(NestedParameter));
exports.ArcSin = ArcSin;
/** Class representing inverse hyperbolic tangent. */
var ArcTanh = /** @class */ (function (_super) {
    __extends(ArcTanh, _super);
    function ArcTanh() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ArcTanh;
}(NestedParameter));
exports.ArcTanh = ArcTanh;
/** Class representing inverse hyperbolic cosine. */
var ArcCosh = /** @class */ (function (_super) {
    __extends(ArcCosh, _super);
    function ArcCosh() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ArcCosh;
}(NestedParameter));
exports.ArcCosh = ArcCosh;
/** Class representing inverse hyperbolic sine. */
var ArcSinh = /** @class */ (function (_super) {
    __extends(ArcSinh, _super);
    function ArcSinh() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ArcSinh;
}(NestedParameter));
exports.ArcSinh = ArcSinh;
/** Class representing exponential. */
var Exp = /** @class */ (function (_super) {
    __extends(Exp, _super);
    function Exp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Exp;
}(NestedParameter));
exports.Exp = Exp;
/** Class representing log. */
var Log = /** @class */ (function (_super) {
    __extends(Log, _super);
    function Log() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Log;
}(NestedParameter));
exports.Log = Log;
/** Class representing pi. */
var Pi = /** @class */ (function (_super) {
    __extends(Pi, _super);
    function Pi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Pi;
}(Parameter));
exports.Pi = Pi;
/** Class representing minus. */
var Minus = /** @class */ (function (_super) {
    __extends(Minus, _super);
    function Minus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Minus;
}(Parameter));
exports.Minus = Minus;
/** Class representing plus. */
var Plus = /** @class */ (function (_super) {
    __extends(Plus, _super);
    function Plus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Plus;
}(Parameter));
exports.Plus = Plus;
/** Class representing times. */
var Times = /** @class */ (function (_super) {
    __extends(Times, _super);
    function Times() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Times;
}(Parameter));
exports.Times = Times;
/** Class representing equals. */
var Equals = /** @class */ (function (_super) {
    __extends(Equals, _super);
    function Equals() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Equals;
}(Parameter));
exports.Equals = Equals;
/** Class representing divide. */
var Divide = /** @class */ (function (_super) {
    __extends(Divide, _super);
    function Divide() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Divide;
}(Parameter));
exports.Divide = Divide;
/** Class representing power. */
var Power = /** @class */ (function (_super) {
    __extends(Power, _super);
    function Power() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Power;
}(Parameter));
exports.Power = Power;
/** Class representing sqrt. */
var Sqrt = /** @class */ (function (_super) {
    __extends(Sqrt, _super);
    function Sqrt() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Sqrt;
}(NestedParameter));
exports.Sqrt = Sqrt;
/** Class representing an expression. */
var Expression = /** @class */ (function (_super) {
    __extends(Expression, _super);
    function Expression(elements) {
        var _this = _super.call(this) || this;
        _this.elements = elements;
        return _this;
    }
    return Expression;
}(Parameter));
exports.Expression = Expression;
